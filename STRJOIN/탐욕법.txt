탐욕법 - greedy methood
- 가장 직관적인 알고르즘 설계 패러다임 중 하나
- 원하는 답을 찾기 위해 재귀 호출과 똑같이 여러 개의 조각으로 쪼개고, 각 단계마다 답의 한부분을 만들어 간다.
- 각 단계마다 지금 당장 가장 좋은 방법 만을 선택
- 탐욕법이 사용 되는 조건
 1. 탐욕법을 사용해도 항상 최적해를 구할 수 있는 문제를 만난 경우(동적 계획법보다 수행시간이 빠르다)
 2. 시간이나 공간적 제약으로 인해 다른 방법으로 최적해를 찾기 어려울 때 근사해를 찾아 낼 수 있다.

ex_회의실 예약(활동 선택 문제)
- 회의실이 한개 / n개의 팀이 신청
- 서로 겹치지 않게 회의를 걸러낼 수 있는 최대 값은? 

정당성의 증명 : 탐욕적 선택 속성
- 탐욕적 알고리즘의 정당성 증명은 일정한 패턴을 가진다.
- 답의 모든 부분을 고려하지 않고 탐욕적으로만 선택하더라도 최적해를 구할 수 있다.

최적 부분 구조

ex_출전 선수 정하기
- 상대방 팀과 우리팀의 실력을 레이팅으로 표현
- 상대방의 출전 선수를 알 경우 최대 승리 수는?


탐욕적 알고리즘 레시피
1. 문제의 답을 만드는 과정을 여러 조각으로 분해
2. 각 조각마다 어떤 우선순위로 선택을 내릴 지 결정
3. 어떤 방식이 동작할 것 같으면 두 가지의 속성을 증명
- 탐욕적 선택 속성 : 항상 각 단계에서 우리가 선택한 답을 포함하는 최적해 존재 여부
- 최적 부분 구조 : 각 단계에서 항상 최적의 선택만을 했을 때 전체 최적해 여부

허프만 코드
- 가변 길이 인코딩 테이블을 만드는 방법
